package main

import "fmt"

func main() {
	var a int = 5
	//不能直接用二進制來表是一個整數  但可以用 %b 輸出
	fmt.Printf("%b\n", a)
	//八進制可以表示，用 0 開頭即可
	var b int = 011
	fmt.Println("b=", b)
	//十六進制也可以表示， 用 0X 或 0x 開頭即可
	var c int = 0X11
	fmt.Println("c=", c)

	//原碼、反碼、補碼
	//對於有符號而言
	//1. 二進制最大位是符號位 : 0 正數 ,1 負數

	// ex 1  [0000 0001] , -1 [1000 0001]

	//2. 正數 : 原碼、反碼、補碼 都一樣

	//3. 負數 : 原碼符號位不變，其他位反過來

	//4. 負數的補碼=反碼+1
	// ex 1 原碼[0000 0001] 反碼[0000 0001] 補碼[0000 0001]
	//ex -1 原碼[1000 0001] 反碼[1111 1110] 補碼[1111 1111]

	//5. 0的反碼、補碼都是0
	//6. 計算機運算的時候，都是以補碼的方式運行

}

// 進制
// 1. 二進制
//     0,1 ,滿 2 進位 1  =>0 , 1 , 10 , 11, 100, 101, 110, 111, 1000 用小學直式加法，一位一位加就知道了，原本是 9+1 才會進位，現在 1+1 就會進位了
// 2. 十進制
//     0~9 ,滿 10 進位 1
// 3. 八進制
//     0~7 ,滿 8 進位 1
// 	以數字 0 為開頭

// 4. 十六進制
//     0~9 和 A~F,滿 16 進位 1 ,不區分大小寫
// 	以 0X 或 0x 為開頭

// golang中的進制
// 1. 不能直接用二進制來表是一個整數  但可以用 %b 輸出
// 2. 八進制可以表示，用 0 開頭即可
// 3. 十六進制也可以表示， 用 0X 或 0x 開頭即可

//簡單
//二進制 => 十進制
//從最小位，*2(從0次方開始)，求和
//ex: (二進制)1011 = 1*2^0 + 1*2^1 + 0*2^2 + 1*2^3 = (十進制)11

//八進制 => 十進制
//從最小位，*8(從0次方開始)，求和
//ex: (八進制)0123 = 3*8^0 + 2*8^1 + 1*8^2 + 0*8^3 = (十進制)83

//十六進制 => 十進制
//從最小位，*16(從0次方開始)，求和
//ex: (十六進制)0x34A = 10*16^0 + 4*16^1 + 3*16^2 = (十進制)842
//

//十進制 => 二進制
//該數不斷除以2 直到 商為0 然後將 得到的餘數 ，由下往上排
//ex (十進制) 56 =>(二進制)111000   ..自己用手算
//56/2=28...0
//28/2=14...0
//14/2=7...0
//7/2=3...1
//3/2=1...1
//1/2=0...1

//十進制 =>八進制
//該數不斷除以8 直到 商為0 然後將 得到的餘數 ，由下往上排
//ex (十進制) 156 = (八進制) 0234 因為要0開頭
//156/8=19...4
//19/8=2...3
//2/8=0...2

//十進制 =>十六進制
//該數不斷除以16 直到 商為0 然後將 得到的餘數 ，由下往上排
//ex (十進制) 356 =(十六進制) 0x164
//356/16=22...4
//22/16=1...6
//1/16=0...1

//二進制  0 , 1 , 10 , 11, 100, 101, 110, 111, 1000
//八進制  0 , 1 , 2  , 3 , 4  , 5  , 6  , 7
//二進制 => 八進制
//將數字三位一組(從小到大)，轉成對應的八進制數
//ex (二進制)11010101 =>拆成 11 010 101 =>(八進制) 0325

//二進制  0 , 1 , 10 , 11, 100, 101, 110, 111, 1000 , 1001 , 1010 , 1011 , 1100 ,1101 , 1110 , 1111
//十六制  0 , 1 , 2  , 3 , 4  , 5  , 6  , 7  , 8    , 9    , A    , B    , C    ,D    , E    , F
//二進制 => 十六進制
//將數字四位一組(從小到大)， 轉成對應的十六進制數
//ex (二進制)11010101 => 拆成 1101 0101 =>(十六進制)  0XD5

//八進制 => 二進制
//每一位轉成(三位)二進制
//ex (八進制)0237 => (二進制)10 011 111 =>10011111

//十六進制 => 二進制
//每一位轉成(四位)二進制
//ex (十六進制)0x237 => (二進制) 0010 0011 0111 => 1000110111

//原碼、反碼、補碼
//對於有符號而言
//1. 二進制最大位是符號位 : 0 正數 ,1 負數
//2. 正數 : 原碼、反碼、補碼 都一樣
//3. 負數 : 原碼符號位不變，其他位反過來
//4. 負數的補碼=反碼+1
//5. 0的反碼、補碼都是0
//6. 計算機運算的時候，都是以補碼的方式運行
